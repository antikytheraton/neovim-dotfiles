let g:plugged_home = '~/.vim/plugged'

call plug#begin('~/.config/nvim/plugged')
Plug 'wakatime/vim-wakatime'
" Lua integration
Plug 'nvim-lua/plenary.nvim'
Plug 'vimwiki/vimwiki'
" Tmux-Neovim
Plug 'tmux-plugins/vim-tmux-focus-events'
Plug 'christoomey/vim-tmux-navigator'
" Language Utils
Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
Plug 'neovim/nvim-lspconfig'
Plug 'hrsh7th/cmp-nvim-lsp'
Plug 'hrsh7th/cmp-buffer'
Plug 'hrsh7th/cmp-path'
Plug 'hrsh7th/cmp-cmdline'
Plug 'hrsh7th/nvim-cmp'
" Snippet engine
Plug 'L3MON4D3/LuaSnip'
Plug 'saadparwaiz1/cmp_luasnip'
Plug 'rafamadriz/friendly-snippets'
Plug 'onsails/lspkind-nvim' " icons for completion menu
" Programming
Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }
Plug 'dag/vim-fish'
Plug 'lifepillar/pgsql.vim'   " PostgreSQL syntax highlighting
Plug 'hashivim/vim-terraform' " Terraform syntax highlighting
Plug 'tpope/vim-surround'
" Formater
Plug 'jiangmiao/auto-pairs'
" Linter
Plug 'dense-analysis/ale'
"Better Visual Guide
Plug 'Yggdroot/indentLine'
Plug 'preservim/nerdtree' |
            \ Plug 'Xuyuanp/nerdtree-git-plugin' |
            \ Plug 'ryanoasis/vim-devicons'
Plug 'tmhedberg/simpylfold'
Plug 'neoclide/jsonc.vim'
Plug 'neomake/neomake'
Plug 'machakann/vim-highlightedyank'
" GIT
Plug 'tpope/vim-fugitive'
Plug 'TimUntersberger/neogit'
Plug 'f-person/git-blame.nvim'
Plug 'lewis6991/gitsigns.nvim'
" Floating terminal
Plug 'voldikss/vim-floaterm'
" File Searching
Plug 'nvim-telescope/telescope.nvim'
Plug 'nvim-telescope/telescope-fzf-native.nvim', { 'do': 'make' }
" Theme
Plug 'marko-cerovac/material.nvim'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
call plug#end()

" ============================================================================ "
" ===                           CONFIGURATION                              === "
" ============================================================================ "
let mapleader = ","
" Copy to clipboard
vmap <C-c> "+y
" Remap ii as Esc
":imap ii <Esc>
:imap jk <Esc>
:imap kj <Esc>
" Autosave buffers before leaving them
autocmd BufLeave * silent! :wa
" Remove trailing white spaces on save
" autocmd BufWritePre * :%s/\s\+$//e
" Center the screen quickly
nnoremap <space> zz
" theme settings
set termguicolors
let $NVIM_TUI_ENABLE_TRUE_COLOR=1
" IndentLine {{
let g:indentLine_char_list = ['|', '¦', '┆', '┊']
let g:indentLine_showFirstIndentLevel = 1
let g:indentLine_setColors = 0
" }}
"  neovim specific settings
if has('nvim')
    " Set the Python binaries neovim is using. Please note that you will need to
    " install the neovim package for these binaries separately like this for
    " example:
    " pip3.6 install -U neovim
    "let g:python_host_prog =  '/usr/bin/python2'
    let g:python3_host_prog = '/opt/homebrew/bin/python3'
endif
if has("gui_running")
    set guicursor=n-v-c-sm:block,i-ci-ve:block,r-cr-o:blocks
endif
" Fix some common typos
cnoreabbrev Q q
cnoreabbrev Q! q!
cnoreabbrev Qall qall
cnoreabbrev Qall! qall!
cnoreabbrev Qa qa
cnoreabbrev Qw qw
cnoreabbrev Qwa qwa
cnoreabbrev W w
cnoreabbrev W! w!
cnoreabbrev WQ wq
cnoreabbrev Wa wa
cnoreabbrev Wq wq
cnoreabbrev wQ wq


"----------------------------------------------
" General settings
"----------------------------------------------
set path+=**                      " searches current directory recursively
set encoding=utf-8
set autoread
set autoindent                    " take indent for new line from previous line
set smartindent                   " enable smart indentation
set autowrite                     " write when switching buffers
set autowriteall                  " write on :quit
set number
set title
set colorcolumn=81                " highlight the 80th column as an indicator
" set list
" set relativenumber
set hidden
set mouse=a
set noshowmode
set noshowmatch
set nolazyredraw
set cmdheight=1
set updatetime=300
set shortmess+=c
" Turn off backup
set nobackup
set noswapfile
set nowritebackup
" Tab and Indent configuration
set expandtab
set tabstop=4
set shiftwidth=4

set nocompatible
filetype plugin on
filetype plugin indent on
syntax on
syntax enable

""  ============================================================================ "
""  ===                          AIRLINE
""  ============================================================================ "
set laststatus=2
let g:airline_detect_modified=0
let g:airline_detect_paste=0
let g:airline_detect_crypt=1
let g:airline#extensions#fzf#enabled = 1
let g:airline_powerline_fonts = 1
let g:airline_theme='night_owl'
let g:airline#extensions#branch#enabled = 1
let g:airline#extensions#branch#empty_message = ''
let g:airline#extensions#branch#vcs_priority = ["git", "mercurial"]
let g:airline#extensions#branch#displayed_head_limit = 10
let g:airline#extensions#nvimlsp#enabled = 1
let airline#extensions#nvimlsp#error_symbol = '⤫'
let airline#extensions#nvimlsp#warning_symbol = '⚠'
let g:airline#extensions#ale#enabled = 1
let g:airline#extensions#term#enabled = 0

function! s:update_highlights()
  hi CursorLine ctermbg=none guibg=NONE
  hi VertSplit ctermbg=none guibg=NONE
endfunction
autocmd User AirlineAfterTheme call s:update_highlights()


let g:airline#extensions#neomake#enabled = 1
let airline#extensions#neomake#error_symbol = 'E:'
let airline#extensions#neomake#warning_symbol = 'W:'


""  ============================================================================ "
""  ===                          ALE
""  ============================================================================ "
let g:ale_sign_error = '⤫'
let g:ale_sign_warning = '⚠'
let g:ale_go_gopls_init_options = {'ui.diagnostic.analyses': {
    \ 'composites': v:false,
    \ 'unusedparams': v:true,
    \ 'unusedresult': v:true,
    \ }}
" Equivalent to the above.
let b:ale_fixers = {
    \ '*': ['remove_trailing_lines', 'trim_whitespace'],
    \ 'javascript': ['prettier', 'eslint'],
    \}
let g:ale_fix_on_save = 1

""  ============================================================================ "
""  ===                          TREESITTER
""  ============================================================================ "
lua << EOF
require'nvim-treesitter.configs'.setup {
  highlight = {
    enable = true,
    -- Setting this to true will run `:h syntax` and tree-sitter at the same time.
    -- Set this to `true` if you depend on 'syntax' being enabled (like for indentation).
    -- Using this option may slow down your editor, and you may see some duplicate highlights.
    -- Instead of true it can also be a list of languages
    additional_vim_regex_highlighting = false,
  },
}
EOF

""  ============================================================================ "
""  ===                          MATERIAL THEME
""  ============================================================================ "

lua << EOF
require('material').setup({
	contrast = {
		sidebars = false, -- Enable contrast for sidebar-like windows ( for example Nvim-Tree )
		floating_windows = false, -- Enable contrast for floating windows
		line_numbers = false, -- Enable contrast background for line numbers
		sign_column = false, -- Enable contrast background for the sign column
		cursor_line = true, -- Enable darker background for the cursor line
		non_current_windows = false, -- Enable darker background for non-current windows
		popup_menu = false, -- Enable lighter background for the popup menu
	},
	italics = {
		comments = true, -- Enable italic comments
		keywords = true, -- Enable italic keywords
		functions = true, -- Enable italic functions
		strings = true, -- Enable italic strings
		variables = true -- Enable italic variables
	},
--	contrast_filetypes = { -- Specify which filetypes get the contrasted (darker) background
--		"terminal", -- Darker terminal background
--		"packer", -- Darker packer background
--		"qf" -- Darker qf list background
--	},
	high_visibility = {
		lighter = false, -- Enable higher contrast text for lighter style
		darker = true -- Enable higher contrast text for darker style
	},
	disable = {
		borders = false, -- Disable borders between verticaly split windows
		background = false, -- Prevent the theme from setting the background (NeoVim then uses your teminal background)
		term_colors = false, -- Prevent the theme from setting terminal colors
		eob_lines = false -- Hide the end-of-buffer lines
	},
	async_loading = true, -- Load parts of the theme asyncronously for faster startup (turned on by default)
	custom_highlights = {} -- Overwrite highlights with your own
    -- lualine_style = 'default'
})

-- require('lualine').setup()

vim.g.material_style = "palenight"
vim.cmd 'colorscheme material'

EOF

"colorscheme material
nnoremap <leader>mm :lua require('material.functions').toggle_style()<CR>


""  ============================================================================ "
""  ===                          NVIM LSP                                    === "
""  ============================================================================ "
lua <<EOF
local signs = { Error = " ", Warn = " ", Hint = " ", Info = " " }
for type, icon in pairs(signs) do
  local hl = "DiagnosticSign" .. type
  vim.fn.sign_define(hl, { text = icon, texthl = hl, numhl = hl })
end
EOF

""  ============================================================================ "
""  ===                          NVIM CMP SETUP                              === "
""  ============================================================================ "
set completeopt=menu,menuone,noselect
lua <<EOF
  -- Setup nvim-cmp.
  local has_words_before = function()
    local line, col = unpack(vim.api.nvim_win_get_cursor(0))
    return col ~= 0 and vim.api.nvim_buf_get_lines(0, line - 1, line, true)[1]:sub(col, col):match("%s") == nil
  end
  local cmp = require'cmp'
  local luasnip = require("luasnip")
  require("luasnip.loaders.from_vscode").load()
  local lspkind = require('lspkind')
  cmp.setup({
    formatting = {
        format = lspkind.cmp_format({
            mode = "symbol_text",
            menu = ({
                 buffer = "[Buffer]",
                 nvim_lsp = "[LSP]",
                 luasnip = "[LuaSnip]",
                 nvim_lua = "[Lua]",
                 latex_symbols = "[Latex]",
            })
        }),
    },
    snippet = {
      -- REQUIRED - you must specify a snippet engine
      expand = function(args)
        -- vim.fn["vsnip#anonymous"](args.body) -- For `vsnip` users.
        require('luasnip').lsp_expand(args.body) -- For `luasnip` users.
        -- require('snippy').expand_snippet(args.body) -- For `snippy` users.
        -- vim.fn["UltiSnips#Anon"](args.body) -- For `ultisnips` users.
      end,
    },
    mapping = {
        ['<C-p>'] = cmp.mapping.select_prev_item(),
        ['<C-n>'] = cmp.mapping.select_next_item(),
        ['<C-d>'] = cmp.mapping.scroll_docs(-4),
        ['<C-f>'] = cmp.mapping.scroll_docs(4),
        ['<C-Space>'] = cmp.mapping.complete(),
        ['<C-e>'] = cmp.mapping.close(),
        ['<CR>'] = cmp.mapping.confirm {
          behavior = cmp.ConfirmBehavior.Replace,
          select = true,
        },
        ['<Tab>'] = cmp.mapping(function(fallback)
          if cmp.visible() then
            cmp.select_next_item()
          elseif luasnip.expand_or_jumpable() then
            luasnip.expand_or_jump()
--          elseif has_words_before() then
--            cmp.complete()
          else
            fallback()
          end
      end, {"i", "s"}),
        ['<S-Tab>'] = cmp.mapping(function(fallback)
          if cmp.visible() then
            cmp.select_prev_item()
          elseif luasnip.jumpable(-1) then
            luasnip.jump(-1)
          else
            fallback()
          end
      end, {"i", "s"}),
      },
    sources = cmp.config.sources({
      { name = 'nvim_lsp' },
      -- { name = 'vsnip' }, -- For vsnip users.
      { name = 'luasnip' }, -- For luasnip users.
      -- { name = 'ultisnips' }, -- For ultisnips users.
      -- { name = 'snippy' }, -- For snippy users.
    }, {
      { name = 'buffer' },
    })
  })
  -- Set configuration for specific filetype.
  cmp.setup.filetype('gitcommit', {
    sources = cmp.config.sources({
      { name = 'cmp_git' }, -- You can specify the `cmp_git` source if you were installed it.
    }, {
      { name = 'buffer' },
    })
  })
  -- Use buffer source for `/` (if you enabled `native_menu`, this won't work anymore).
  cmp.setup.cmdline('/', {
    sources = {
      { name = 'buffer' }
    }
  })
  -- Use cmdline & path source for ':' (if you enabled `native_menu`, this won't work anymore).
  cmp.setup.cmdline(':', {
    sources = cmp.config.sources({
      { name = 'path' }
    }, {
      { name = 'cmdline' }
    })
  })

    -- Mappings.
    -- See `:help vim.diagnostic.*` for documentation on any of the below functions
    local opts = { noremap=true, silent=true }
    -- vim.api.nvim_set_keymap('n', '<space>e', '<cmd>lua vim.diagnostic.open_float()<CR>', opts)
    vim.api.nvim_set_keymap('n', '[g', '<cmd>lua vim.diagnostic.goto_prev()<CR>', opts)
    vim.api.nvim_set_keymap('n', ']g', '<cmd>lua vim.diagnostic.goto_next()<CR>', opts)
    -- vim.api.nvim_set_keymap('n', '<space>q', '<cmd>lua vim.diagnostic.setloclist()<CR>', opts)

    -- Use an on_attach function to only map the following keys
    -- after the language server attaches to the current buffer
    local on_attach = function(client, bufnr)
        -- Enable completion triggered by <c-x><c-o>
        vim.api.nvim_buf_set_option(bufnr, 'omnifunc', 'v:lua.vim.lsp.omnifunc')

        -- Mappings.
        -- See `:help vim.lsp.*` for documentation on any of the below functions
        vim.api.nvim_buf_set_keymap(bufnr, 'n', 'gD', '<cmd>lua vim.lsp.buf.declaration()<CR>', opts)
        vim.api.nvim_buf_set_keymap(bufnr, 'n', 'gd', '<cmd>lua vim.lsp.buf.definition()<CR>', opts)
        vim.api.nvim_buf_set_keymap(bufnr, 'n', 'K', '<cmd>lua vim.lsp.buf.hover()<CR>', opts)
        vim.api.nvim_buf_set_keymap(bufnr, 'n', 'gi', '<cmd>lua vim.lsp.buf.implementation()<CR>', opts)
        vim.api.nvim_buf_set_keymap(bufnr, 'n', '<leader>s', '<cmd>lua vim.lsp.buf.signature_help()<CR>', opts)
        vim.api.nvim_buf_set_keymap(bufnr, 'n', '<leader>wa', '<cmd>lua vim.lsp.buf.add_workspace_folder()<CR>', opts)
        vim.api.nvim_buf_set_keymap(bufnr, 'n', '<leader>wr', '<cmd>lua vim.lsp.buf.remove_workspace_folder()<CR>', opts)
        vim.api.nvim_buf_set_keymap(bufnr, 'n', '<leader>wl', '<cmd>lua print(vim.inspect(vim.lsp.buf.list_workspace_folders()))<CR>', opts)
        vim.api.nvim_buf_set_keymap(bufnr, 'n', '<leader>D', '<cmd>lua vim.lsp.buf.type_definition()<CR>', opts)
        vim.api.nvim_buf_set_keymap(bufnr, 'n', '<F2>', '<cmd>lua vim.lsp.buf.rename()<CR>', opts)
        vim.api.nvim_buf_set_keymap(bufnr, 'n', '<leader>ca', '<cmd>lua vim.lsp.buf.code_action()<CR>', opts)
        vim.api.nvim_buf_set_keymap(bufnr, 'n', 'gr', '<cmd>lua vim.lsp.buf.references()<CR>', opts)
        vim.api.nvim_buf_set_keymap(bufnr, 'n', '<F3>', '<cmd>lua vim.lsp.buf.formatting()<CR>', opts)

        vim.lsp.handlers["textDocument/hover"] = vim.lsp.with(
        vim.lsp.handlers.hover, {
                -- Use a sharp border with `FloatBorder` highlights
                border = "single"
            }
        )
    end


    -- Setup lspconfig.
    local servers = {'gopls', 'pyright', 'tsserver', 'eslint', 'jsonls'}
    local capabilities = require('cmp_nvim_lsp').update_capabilities(vim.lsp.protocol.make_client_capabilities())
    -- Replace <YOUR_LSP_SERVER> with each lsp server you've enabled.
    for _, lsp in pairs(servers) do
        require('lspconfig')[lsp].setup {
            on_attach = on_attach,
            flags = {
                debounce_text_changes = 150,
            },
            capabilities = capabilities
        }
    end
EOF

""  ============================================================================ "
""  ===                          GIT SIGNS
""  ============================================================================ "
lua <<EOF
    require('gitsigns').setup()
EOF
""""""""""""""""""""""""""""""""""""""""""""
""              vim-go
""""""""""""""""""""""""""""""""""""""""""""

" indentation for go
au FileType go setlocal ts=4 sw=4 sts=4 et
au FileType go set noexpandtab
au FileType go set shiftwidth=4
au FileType go set softtabstop=4
au FileType go set tabstop=4

au FileType go nmap <leader>gt :GoDeclsDir<cr>
" highlighting
let g:go_highlight_types = 1
let g:go_highlight_build_constraints = 1
let g:go_highlight_extra_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_operators = 1
let g:go_highlight_structs = 1

let g:go_auto_sameids = 0
let g:go_auto_type_info = 1
let g:go_echo_command_info = 1
" autoimports
let g:go_fmt_command = "goimports"
" metalinter
"let g:go_metalinter_enabled = ['vet', 'golint', 'errcheck']
let g:go_metalinter_command = ""
let g:go_metalinter_deadline = "5s"
let g:go_metalinter_enabled = [
    \ 'deadcode',
    \ 'gas',
    \ 'goconst',
    \ 'gocyclo',
    \ 'golint',
    \ 'gosimple',
    \ 'ineffassign',
    \ 'vet',
    \ 'vetshadow',
    \ 'errcheck'
\]

" neomake configuration for Go.
let g:neomake_go_enabled_makers = [ 'go', 'gometalinter' ]
let g:neomake_go_gometalinter_maker = {
  \ 'args': [
  \   '--tests',
  \   '--enable-gc',
  \   '--concurrency=3',
  \   '--fast',
  \   '-D', 'aligncheck',
  \   '-D', 'dupl',
  \   '-D', 'gocyclo',
  \   '-D', 'gotype',
  \   '-E', 'misspell',
  \   '-E', 'unused',
  \   '%:p:h',
  \ ],
  \ 'append_file': 0,
  \ 'errorformat':
  \   '%E%f:%l:%c:%trror: %m,' .
  \   '%W%f:%l:%c:%tarning: %m,' .
  \   '%E%f:%l::%trror: %m,' .
  \   '%W%f:%l::%tarning: %m'
  \ }

" Using gopls to find definitions and information.
let g:go_def_mode='gopls'
let g:go_info_mode='gopls'

" Add the failing test name to the output of :GoTest
let g:go_test_show_name = 1

" alternate between implementation and test
au Filetype go nmap <leader>ga <Plug>(go-alternate-edit)
au Filetype go nmap <leader>gah <Plug>(go-alternate-split)
au Filetype go nmap <leader>gav <Plug>(go-alternate-vertical)
" Runt tests `short` mode
"""au FileType go nmap <F10> :GoTest -short<cr>
au FileType go nmap <F10> :GoTest -timeout 5m<cr>
" Run test for selected function
au FileType go nmap <F6> :GoTestFunc<cr>
" Check coverage
"""au FileType go nmap <F9> :GoCoverageToggle -short<cr>
au FileType go nmap <F9> :GoCoverageToggle -timeout 5m<cr>

"autocmd BufWritePre *.go :silent call CocAction('runCommand', 'editor.action.organizeImport')

"----------------------------------------------
" Language: Protobuf
"----------------------------------------------
au FileType proto set expandtab
au FileType proto set shiftwidth=2
au FileType proto set softtabstop=2
au FileType proto set tabstop=2
"----------------------------------------------
" Language: SQL
"----------------------------------------------
au FileType sql set expandtab
au FileType sql set shiftwidth=2
au FileType sql set softtabstop=2
au FileType sql set tabstop=2
"----------------------------------------------
" Language: TOML
"----------------------------------------------
au FileType toml set expandtab
au FileType toml set shiftwidth=2
au FileType toml set softtabstop=2
au FileType toml set tabstop=2
"----------------------------------------------
" Language: vimscript
"----------------------------------------------
au FileType vim set expandtab
au FileType vim set shiftwidth=4
au FileType vim set softtabstop=4
au FileType vim set tabstop=4

"----------------------------------------------
" Language: YAML
"----------------------------------------------
au FileType yaml set expandtab
au FileType yaml set shiftwidth=2
au FileType yaml set softtabstop=2
au FileType yaml set tabstop=2

""""""""""""""""""""""""""""""""""""""""""""
""              syntax
""""""""""""""""""""""""""""""""""""""""""""
" Automatic syntax highlighting for files
au BufRead,BufNewFile *.sbt           set filetype=scala
au BufRead,BufNewFile *.conf          set filetype=dosini
au BufRead,BufNewFile *.bash*         set filetype=sh
au BufRead,BufNewFile *.jsonnet*      set filetype=c
au BufRead,BufNewFile *.libsonnet*    set filetype=c
au BufRead,BufNewFile todo*           set filetype=todo
au BufRead,BufNewFile *.txt           set filetype=todo
au BufRead,BufNewFile *.tf            set filetype=terraform
au BufRead,BufNewFile *.terraform     set filetype=terraform
au BufRead,BufNewFile *.yaml.j2       set filetype=yaml
au BufRead,BufNewFile *.env.dist      set filetype=.env
au BufRead,BufNewFile *.json.golden   set filetype=json
" file types
au FileType css setlocal ts=2 sw=2 sts=2 et
au FileType html setlocal ts=4 sw=4 sts=4 et omnifunc=
au FileType java setlocal ts=4 sw=4 sts=4 noet au FileType go setlocal ts=4 sw=4 sts=4 noet
au FileType javascript setlocal ts=2 sw=2 sts=2 et
au FileType javascript.jsx setlocal ts=2 sw=2 sts=2 et
au Filetype json setlocal ts=2 sw=2 sts=2 et
"au FileType json autocmd BufWritePre <buffer> <cmd>EslintFixAll<CR>
au FileType markdown setlocal spell ts=4 sw=4 sts=4 et
au FileType make setlocal sw=4 sts=4 noet nowrap
au FileType py setlocal ts=4 sw=4 sts=4 et
au FileType scss setlocal ts=2 sw=2 sts=2 et
au FileType yaml setlocal ts=2 sw=2 sts=2 et



""""""""""""""""""""""""""""""""""""""""""""
""              git-fugitive
""""""""""""""""""""""""""""""""""""""""""""
nnoremap <leader>gb :Git blame<cr>
nnoremap <leader>gd :Gdiffsplit<cr>
nnoremap <leader>gr :GRead<cr>
nnoremap <leader>gm :GMove<cr>
nnoremap <leader>gw :GBrowse<cr>


""""""""""""""""""""""""""""""""""""""""""""
""              nerdtree
""""""""""""""""""""""""""""""""""""""""""""
let g:NERDTreeShowHidden = 1
let g:NERDTreeMinimalUI = 1
let g:NERDTreeIgnore = [
    \ '\~$',
    \ '\.pyc$',
    \ '^\.DS_Store$',
    \ '^node_modules$',
    \ '^.ropeproject$',
    \ '^__pycache__$'
\]
let g:NERDTreeStatusline = ''
" Automaticaly close nvim if NERDTree is only thing left open
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
" Toggle
nnoremap <silent> <C-b> :NERDTreeToggle<CR>
" nerdtree
" sync open file with NERDTree
" Check if NERDTree is open or active
function! IsNERDTreeOpen()
    return exists("t:NERDTreeBufName") && (bufwinnr(t:NERDTreeBufName) != -1)
endfunction
"nerdtree-git-plugin
let g:NERDTreeGitStatusIndicatorMapCustom = {
            \ 'Modified'  :'✹',
            \ 'Staged'    :'✚',
            \ 'Untracked' :'✭',
            \ 'Renamed'   :'➜',
            \ 'Unmerged'  :'═',
            \ 'Deleted'   :'✖',
            \ 'Dirty'     :'✗',
            \ 'Ignored'   :'☒',
            \ 'Clean'     :'✔︎',
            \ 'Unknown'   :'?',
            \ }


""""""""""""""""""""""""""""""""""""""""""""
""              navigation
""""""""""""""""""""""""""""""""""""""""""""
" Disable arrow keys
" noremap <Up> <NOP>
" noremap <Down> <NOP>
" noremap <Left> <NOP>
" noremap <Right> <NOP>

" Move between buffers with Shift + arrow key...
nnoremap <Left> :bprevious<cr>
nnoremap <Right> :bnext<cr>

" ... but skip the quickfix when navigating
augroup qf
    autocmd!
    autocmd FileType qf set nobuflisted
augroup END

" open new split panes to right and below
set splitright
set splitbelow
nnoremap <leader>e :e.<cr>
nnoremap <leader>v :vs.<cr>
nnoremap <leader>h :Hexplore!<cr>
nnoremap <leader>? :History<cr>
nnoremap <leader>t :tabs<cr>
nnoremap <leader>l :vsp<cr>
nnoremap <leader>w :sp<cr>

""""""""""""""""""""""""""""""""""""""""""""
""              terminal
""""""""""""""""""""""""""""""""""""""""""""
"""  turn terminal to normal mode with escape
"""tnoremap <Esc> <C-\><C-n>
""""" start terminal in insert mode
"""au BufEnter * if &buftype == 'terminal' | :startinsert | endif
""" open terminal on ctrl+n
"""function! OpenTerminal()
"""    split term://fish
"""    resize 10
"""endfunction
"""nnoremap <c-n> :call OpenTerminal()<CR>



let g:floaterm_keymap_new = '<c-n>'
let g:floaterm_keymap_hide = '<c-n>'
let g:floaterm_keymap_toggle = '<c-n>'
let g:floaterm_wintype = 'split'
" Set floaterm gray when focus out
" hi FloatermNC guibg=gray

""""""""""""""""""""""""""""""""""""""""""""
""     TELESCOPE
""""""""""""""""""""""""""""""""""""""""""""
"nnoremap <leader>ff <cmd>Telescope find_files<cr>

lua << EOF
require('telescope').setup {
    extensions = {
        fzf = {
            fuzzy=true,
            override_generic_sorter=true,
            override_file_sorter=true,
            case_mode="smart_case",
            }
        }
    }
require('telescope').load_extension('fzf')
EOF
nnoremap <C-p> <cmd>Telescope find_files<cr>
nnoremap <leader>f <cmd>Telescope live_grep<cr>
nnoremap <leader>b <cmd>Telescope buffers<cr>
nnoremap <leader>fh <cmd>Telescope help_tags<cr>

"----------------------------------------------
" Searching
"----------------------------------------------
set ignorecase                    " ignore case when searching
set smartcase                     " turn on smartcase
set incsearch
set hlsearch

if has('nvim')
    set inccommand=split
endif

nnoremap n nzzzv
nnoremap N Nzzzv
